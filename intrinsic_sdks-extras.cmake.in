if(NOT DEFINED _INTRINSIC_SDKS_PACKAGE_REGISTERED)
  set(_INTRINSIC_SDKS_PACKAGE_REGISTERED TRUE)

  include(FetchContent)
  FetchContent_Declare(
    googleapis
    GIT_REPOSITORY https://github.com/googleapis/googleapis
    GIT_TAG        master
  )
  FetchContent_MakeAvailable(googleapis)
endif()

get_filename_component(@PROJECT_NAME@_SHARE_DIR "${@PROJECT_NAME@_DIR}" DIRECTORY)
set(@PROJECT_NAME@_PROTO_DIR "${@PROJECT_NAME@_SHARE_DIR}/protos")
set(@PROJECT_NAME@_DESC "${@PROJECT_NAME@_SHARE_DIR}/intrinsic_proto.desc")

macro(intrinsic_sdks_protobuf_generate)
  set(options)
  set(oneValueArgs SKILL_NAME)
  set(multiValueArgs IMPORT_DIRS SOURCES)

  cmake_parse_arguments(GENERATE_ARGS "${options}" "${oneValueArgs}"
                          "${multiValueArgs}" ${ARGN})

  set(GENERATE_ARGS_TARGET ${GENERATE_ARGS_SKILL_NAME}_protos)

  set(OUT_DIR ${CMAKE_CURRENT_BINARY_DIR}/${GENERATE_ARGS_SKILL_NAME})

  file(MAKE_DIRECTORY ${OUT_DIR})

  if(GENERATE_ARGS_IMPORT_DIRS)
    set(IMPORT_DIRS ${GENERATE_ARGS_IMPORT_DIRS})
  else()
    set(IMPORT_DIRS ${CMAKE_CURRENT_SOURCE_DIR})
  endif()

  list(APPEND IMPORT_DIRS ${@PROJECT_NAME@_PROTO_DIR} ${googleapis_SOURCE_DIR})

  message(STATUS ${IMPORT_DIRS})

  set(DESCRIPTOR_SET ${OUT_DIR}/${GENERATE_ARGS_SKILL_NAME}_protos.desc)

  add_library(${GENERATE_ARGS_TARGET} STATIC ${GENERATE_ARGS_SOURCES})
  protobuf_generate(
    TARGET ${GENERATE_ARGS_TARGET}
    LANGUAGE cpp
    IMPORT_DIRS ${IMPORT_DIRS}
    PROTOC_OUT_DIR ${OUT_DIR}
  )

  target_include_directories(${GENERATE_ARGS_TARGET} PUBLIC ${OUT_DIR})
  target_link_libraries(${GENERATE_ARGS_TARGET} PUBLIC protobuf::libprotobuf intrinsic_sdks::intrinsic_sdks)

  set(PROTOC_ARGS "")

  foreach(DIR ${IMPORT_DIRS})
    list(APPEND PROTOC_ARGS "-I${DIR}")
  endforeach()

  list(APPEND PROTOC_ARGS "--include_imports" "--include_source_info" "--descriptor_set_out=${DESCRIPTOR_SET}")
  list(APPEND PROTOC_ARGS "${GENERATE_ARGS_SOURCES}")

  add_custom_command(
    OUTPUT ${DESCRIPTOR_SET}
    COMMAND protobuf::protoc
    ARGS ${PROTOC_ARGS}
    DEPENDS ${protobuf_PROTOC_EXE}
    COMMENT "Generating skill descriptor set for: ${GENERATE_ARGS_SKILL_NAME}"
    VERBATIM
  )

  add_custom_target(${GENERATE_ARGS_SKILL_NAME}_desc DEPENDS ${DESCRIPTOR_SET})
endmacro()

macro(intrinsic_sdks_generate_skill_config)
  set(options)
  set(oneValueArgs SKILL_NAME MANIFEST)
  set(multiValueArgs)

  cmake_parse_arguments(GENERATE_ARGS "${options}" "${oneValueArgs}"
                          "${multiValueArgs}" ${ARGN})

  set(OUT_DIR ${CMAKE_CURRENT_BINARY_DIR}/${GENERATE_ARGS_SKILL_NAME})
  set(GENERATE_SCRIPT "${@PROJECT_NAME@_SHARE_DIR}/cmake/generate_manifest.sh")

  add_custom_command(
    OUTPUT ${OUT_DIR}/${GENERATE_ARGS_SKILL_NAME}_manifest.pbbin
    COMMAND ${GENERATE_SCRIPT}
    ARGS
      ${@PROJECT_NAME@_DESC}
      intrinsic_proto.skills.Manifest
      ${CMAKE_CURRENT_SOURCE_DIR}/${GENERATE_ARGS_MANIFEST}
      ${OUT_DIR}/${GENERATE_ARGS_SKILL_NAME}_manifest.pbbin
    COMMENT "Generating skill manifest for ${GENERATE_ARGS_SKILL_NAME}"
    DEPENDS
      ${protobuf_PROTOC_EXE}
  )

  add_custom_command(
    OUTPUT ${OUT_DIR}/${GENERATE_ARGS_SKILL_NAME}_skill_config.pbbin
    COMMAND ${@PROJECT_NAME@_DIR}/../../../bin/skill_service_config_main
    ARGS
      --manifest_pbbin_filename=${OUT_DIR}/${GENERATE_ARGS_SKILL_NAME}_manifest.pbbin
      --proto_descriptor_filename=${OUT_DIR}/${GENERATE_ARGS_SKILL_NAME}_protos.desc
      --output_config_filename=${OUT_DIR}/${GENERATE_ARGS_SKILL_NAME}_skill_config.pbbin
    COMMENT "Generating skill config for ${GENERATE_ARGS_SKILL_NAME}"
    DEPENDS
      ${OUT_DIR}/${GENERATE_ARGS_SKILL_NAME}_manifest.pbbin
      ${OUT_DIR}/${GENERATE_ARGS_SKILL_NAME}_protos.desc
  )

  add_custom_target(
    ${GENERATE_ARGS_SKILL_NAME}_skill_config DEPENDS
      ${OUT_DIR}/${GENERATE_ARGS_SKILL_NAME}_skill_config.pbbin
  )
endmacro()

macro(intrinsic_sdks_generate_skill)
  set(options)
  set(oneValueArgs SKILL_NAME MANIFEST)
  set(multiValueArgs SOURCES)

  cmake_parse_arguments(GENERATE_ARGS "${options}" "${oneValueArgs}"
                          "${multiValueArgs}" ${ARGN})

  intrinsic_sdks_protobuf_generate(SKILL_NAME ${GENERATE_ARGS_SKILL_NAME} SOURCES ${GENERATE_ARGS_SOURCES})
  intrinsic_sdks_generate_skill_config(SKILL_NAME ${GENERATE_ARGS_SKILL_NAME} MANIFEST ${GENERATE_ARGS_MANIFEST})
endmacro()
